use touchportal_plugin::{reexport::HexColor, *};

pub fn plugin() -> PluginDescription {
    PluginDescription::builder()
        .api(ApiVersion::V4_3)
        .version(1)
        .name("YouTube Live")
        .id("com.thesquareplanet.touchportal.youtube")
        .configuration(
            PluginConfiguration::builder()
                .color_dark(HexColor::from_u24(0xFF0000))
                .color_light(HexColor::from_u24(0x00FF00))
                .parent_category(PluginCategory::Misc)
                .build()
                .unwrap(),
        )
        .setting(
            Setting::builder()
                .name("Texty")
                .initial("boil")
                .kind(SettingType::Text(
                    TextSetting::builder()
                        .max_length(20)
                        .is_password(true)
                        .read_only(true)
                        .build()
                        .unwrap(),
                ))
                .build()
                .unwrap(),
        )
        .setting(
            Setting::builder()
                .name("Switchy")
                .initial("On")
                .kind(SettingType::Switch(
                    SwitchSetting::builder().build().unwrap(),
                ))
                .build()
                .unwrap(),
        )
        .setting(
            Setting::builder()
                .name("Choicy")
                .initial("B")
                .kind(SettingType::Choice(
                    ChoiceSetting::builder()
                        .choice("A")
                        .choice("B")
                        .build()
                        .unwrap(),
                ))
                .build()
                .unwrap(),
        )
        .setting(
            Setting::builder()
                .name("Numbry")
                .initial("23")
                .kind(SettingType::Number(
                    NumberSetting::builder()
                        .max_length(20)
                        .is_password(false)
                        .min_value(0.0)
                        .max_value(120.0)
                        .read_only(false)
                        .build()
                        .unwrap(),
                ))
                .tooltip(
                    Tooltip::builder()
                        .title("Toolstip")
                        .body("Learn more")
                        .doc_url("https://www")
                        .build()
                        .unwrap(),
                )
                .build()
                .unwrap(),
        )
        .plugin_start_cmd(format!(
            "%TP_PLUGIN_FOLDER%YouTubeLive/{}{}",
            std::env::var("CARGO_PKG_NAME").unwrap(),
            std::env::consts::EXE_SUFFIX
        ))
        .category(
            Category::builder()
                .id("tp_tut_001_cat_01")
                .name("Tools")
                .action(
                    Action::builder()
                        .id("tp_pl_action_002")
                        .name("Run that thing")
                        .implementation(ActionImplementation::Dynamic)
                        .datum(
                            Data::builder()
                                .id("tp_pl_002_text")
                                .format(DataFormat::Text(TextData::builder().build().unwrap()))
                                .build()
                                .unwrap(),
                        )
                        .datum(
                            Data::builder()
                                .id("tp_pl_002_switch")
                                .format(DataFormat::Switch(
                                    SwitchData::builder().initial(true).build().unwrap(),
                                ))
                                .build()
                                .unwrap(),
                        )
                        .datum(
                            Data::builder()
                                .id("tp_pl_002_num")
                                .format(DataFormat::Number(
                                    NumberData::builder().initial(42.).build().unwrap(),
                                ))
                                .build()
                                .unwrap(),
                        )
                        .datum(
                            Data::builder()
                                .id("tp_pl_002_choice")
                                .format(DataFormat::Choice(
                                    ChoiceData::builder()
                                        .initial("X")
                                        .choice("X")
                                        .choice("Y")
                                        .build()
                                        .unwrap(),
                                ))
                                .build()
                                .unwrap(),
                        )
                        .lines(
                            Lines::builder()
                                .action(
                                    LingualLine::builder()
                                        .datum(
                                            Line::builder()
                                                .line_format(
                                                    "Do something with value {$tp_pl_002_text$}",
                                                )
                                                .build()
                                                .unwrap(),
                                        )
                                        .build()
                                        .unwrap(),
                                )
                                .build()
                                .unwrap(),
                        )
                        .build()
                        .unwrap(),
                )
                .event(
                    Event::builder()
                        .id("event002")
                        .name("On breakfast eating")
                        .format("When we eat $val as breakfast")
                        .value(EventValueType::Choice(
                            EventChoiceValue::builder()
                                .choice("Apple")
                                .choice("Pears")
                                .choice("Grapes")
                                .choice("Bananas")
                                .build()
                                .unwrap(),
                        ))
                        .value_state_id("tp_sid_fruit")
                        .build()
                        .unwrap(),
                )
                .event(
                    Event::builder()
                        .id("ev_counter")
                        .name("When counter changes")
                        .format("When the counter hits $val")
                        .value(EventValueType::Text)
                        .value_state_id("tp_sid_count")
                        .build()
                        .unwrap(),
                )
                .event(
                    Event::builder()
                        .id("yoc")
                        .name("Yoyoyo")
                        .format("Yo")
                        .value(EventValueType::Text)
                        .value_state_id("")
                        .build()
                        .unwrap(),
                )
                .state(
                    State::builder()
                        .id("tp_sid_fruit")
                        .description("Fruit Kind description")
                        .initial("Apple")
                        .parent_group("Fruits")
                        .kind(StateType::Choice(
                            ChoiceState::builder()
                                .choice("Apple")
                                .choice("Pears")
                                .choice("Grapes")
                                .choice("Bananas")
                                .build()
                                .unwrap(),
                        ))
                        .build()
                        .unwrap(),
                )
                .state(
                    State::builder()
                        .id("tp_sid_count")
                        .description("It's a counter")
                        .initial("0")
                        .kind(StateType::Text(TextState::builder().build().unwrap()))
                        .build()
                        .unwrap(),
                )
                .build()
                .unwrap(),
        )
        .build()
        .unwrap()
}

fn main() {
    let plugin = plugin();

    std::fs::write(
        format!("{}/entry.rs", std::env::var("OUT_DIR").unwrap()),
        touchportal_plugin::codegen::build(&plugin),
    )
    .unwrap();

    std::fs::write(
        format!("{}/entry.tp", std::env::var("OUT_DIR").unwrap()),
        serde_json::to_vec(&plugin).unwrap(),
    )
    .unwrap();
}
