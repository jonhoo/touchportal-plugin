---
source: sdk/src/codegen.rs
assertion_line: 1506
expression: incoming_code.to_string()
---
# [diagnostic :: on_unimplemented (message = "`{Self}` must implement `PluginCallbacks` to receive updates from TouchPortal " , label = "the trait `PluginCallbacks` is not implemented for `{Self}`" , note = "Add `impl PluginCallbacks for {Self} {{}}` and let your IDE or the compiler guide you." , note = "This trait has methods for all possible \"incoming\" messages based on your plugin description in `build.rs`." ,)] trait PluginCallbacks { async fn on_test_action (& mut self , mode : protocol :: ActionInteractionMode , text_data : String , choice_data : ChoicesForChoiceData) -> eyre :: Result < () > ; async fn on_select_choice_data_in_test_action (& mut self , instance : String , selected : ChoicesForChoiceData ,) -> eyre :: Result < () > ; async fn on_broadcast (& mut self , event : protocol :: BroadcastEvent) -> eyre :: Result < () > { tracing :: debug ! (? event , "on_broadcast noop") ; Ok (()) } async fn on_close (& mut self , eof : bool) -> eyre :: Result < () > { tracing :: debug ! (? eof , "on_close noop") ; Ok (()) } async fn on_notification_clicked (& mut self , event : protocol :: NotificationClickedMessage) -> eyre :: Result < () > { tracing :: debug ! (? event , "on_notification_clicked noop") ; Ok (()) } } # [derive (Debug , Clone , serde :: Deserialize , serde :: Serialize)] # [allow (non_camel_case_types)] # [allow (non_snake_case)] pub enum ChoicesForChoiceData { # [serde (rename = "First")] First , # [serde (rename = "Second")] Second , # [doc = r" Used when a choice value has been dynamically created at runtime"] # [doc = r" using `update_choices_in*`."] # [serde (untagged)] Dynamic (String) } impl :: std :: fmt :: Display for ChoicesForChoiceData { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { write ! (f , "{}" , match self { Self :: First => "First" , Self :: Second => "Second" , Self :: Dynamic (other) => other , }) } } impl :: std :: str :: FromStr for ChoicesForChoiceData { type Err = eyre :: Report ; fn from_str (s : & str) -> :: eyre :: Result < Self > { match s { "First" => Ok (Self :: First) , "Second" => Ok (Self :: Second) , _ => Ok (Self :: Dynamic (s . to_string ())) , } } } impl protocol :: TouchPortalToString for ChoicesForChoiceData { fn stringify (& self) -> String { self . to_string () } } impl protocol :: TouchPortalFromStr for ChoicesForChoiceData { fn destringify (s : & str) -> eyre :: Result < Self > { :: std :: str :: FromStr :: from_str (s) } } impl Plugin where Self : PluginCallbacks { async fn handle_incoming (& mut self , msg : protocol :: TouchPortalOutput) -> eyre :: Result < bool > { use protocol :: TouchPortalOutput ; use :: eyre :: Context as _ ; match msg { TouchPortalOutput :: Info (_) => eyre :: bail ! ("got unexpected late info") , TouchPortalOutput :: Action (_) | TouchPortalOutput :: Up (_) | TouchPortalOutput :: Down (_) => { # [allow (unused_variables)] let (interaction_mode , action) = match msg { TouchPortalOutput :: Action (action) => (protocol :: ActionInteractionMode :: Execute , action) , TouchPortalOutput :: Down (action) => (protocol :: ActionInteractionMode :: HoldDown , action) , TouchPortalOutput :: Up (action) => (protocol :: ActionInteractionMode :: HoldUp , action) , _ => unreachable ! ("we would not have entered this outer match arm otherwise") , } ; # [allow (clippy :: match_single_binding)] match & * action . action_id { "test_action" => { # [allow (unused_mut)] let mut args : :: std :: collections :: HashMap < _ , _ > = action . data . into_iter () . map (| idv | (idv . id , idv . value)) . collect () ; :: tracing :: trace ! (? args , concat ! ("action " , "test_action" , " called")) ; let text_data : String = { let arg = args . remove (stringify ! (text_data)) . ok_or_else (|| eyre :: eyre ! (concat ! ("action " , "test_action" , " called without argument " , stringify ! (text_data)))) ? ; protocol :: TouchPortalFromStr :: destringify (& arg) . context (concat ! ("action " , "test_action" , " called with incorrectly typed argument " , stringify ! (text_data))) ? } ; let choice_data : ChoicesForChoiceData = { let arg = args . remove (stringify ! (choice_data)) . ok_or_else (|| eyre :: eyre ! (concat ! ("action " , "test_action" , " called without argument " , stringify ! (choice_data)))) ? ; protocol :: TouchPortalFromStr :: destringify (& arg) . context (concat ! ("action " , "test_action" , " called with incorrectly typed argument " , stringify ! (choice_data))) ? } ; self . on_test_action (interaction_mode , text_data , choice_data) . await . context (concat ! ("handle " , "test_action" , " action")) ? } id => eyre :: bail ! ("action executed with unknown action id {id}") , } } , TouchPortalOutput :: ConnectorChange (change) => { :: tracing :: error ! (? change , "connector changes are not yet implemented") ; } , TouchPortalOutput :: ShortConnectorIdNotification (assoc) => { :: tracing :: error ! (? assoc , "short connector id support are not yet implemented") ; } TouchPortalOutput :: ListChange (change) => { # [allow (clippy :: match_single_binding)] match (& * change . list_id , & * change . action_id) { ("choice_data" , "test_action") => { let value : ChoicesForChoiceData = protocol :: TouchPortalFromStr :: destringify (& change . value) . with_context (|| format ! (concat ! ("list change for choice " , "choice_data" , " called with incorrectly typed select value '{}'") , change . value)) ? ; self . on_select_choice_data_in_test_action (change . instance_id , value) . await . context (concat ! ("handle " , "choice_data" , " list change")) ? ; } , ("choice_data" , aid) => eyre :: bail ! ("list with known id '{}' changed, but with unexpected action id '{aid}'" , change . list_id) , (lid , "test_action") => eyre :: bail ! ("unknown list with id '{lid}' changed in known action '{}'" , change . action_id) , (lid , aid) => eyre :: bail ! ("unknown list '{lid}' in unknown action '{aid}' changed") , } } TouchPortalOutput :: ClosePlugin (_) => { self . on_close (false) . await . context ("handle graceful plugin close") ? ; return Ok (true) ; } , TouchPortalOutput :: Broadcast (event) => { self . on_broadcast (event) . await . context ("handle broadcast event") ? ; } , TouchPortalOutput :: NotificationOptionClicked (event) => { self . on_notification_clicked (event) . await . context ("handle notification click") ? ; } _ => unimplemented ! ("codegen macro must be updated to handle {msg:?}") , } Ok (false) } }
