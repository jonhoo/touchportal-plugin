---
source: sdk/src/codegen.rs
assertion_line: 1482
expression: outgoing_code.to_string()
---
# [derive (Clone , Debug)] pub struct TouchPortalHandle (:: tokio :: sync :: mpsc :: Sender < protocol :: TouchPortalCommand >) ; impl TouchPortalHandle { # [doc = r" As a plug-in developer you can alert your users within Touch Portal for certain events."] # [doc = r""] # [doc = r" This system should only be used for important messages that the user has to act on. Examples"] # [doc = r" are new updates for the plugin or changing settings like credentials. Maybe your user has set"] # [doc = r" up the plug-in incorrectly which is also a good reason to send a notification to alert them to"] # [doc = r" the issue and propose a solution."] # [doc = r""] # [doc = r#" <div class="warning">"#] # [doc = r""] # [doc = r" **Rules of notifications**"] # [doc = r""] # [doc = r" You are only allowed to send user critical notifications to help them on their way."] # [doc = r" Advertisements, donation request and all other non-essential messages are not allowed and may"] # [doc = r" result in your plug-in be blacklisted from the notification center."] # [doc = r""] # [doc = r" </div>"] pub async fn notify (& mut self , cmd : protocol :: CreateNotificationCommand) { let _ = self . 0 . send (protocol :: TouchPortalCommand :: CreateNotification (cmd)) . await ; } # [doc = r" Create a state at runtime."] pub async fn create_state (& mut self , cmd : protocol :: CreateStateCommand) { let _ = self . 0 . send (protocol :: TouchPortalCommand :: CreateState (cmd)) . await ; } # [doc = r" Remove a state at runtime."] pub async fn remove_state (& mut self , id : impl Into < String >) { let _ = self . 0 . send (protocol :: TouchPortalCommand :: RemoveState (protocol :: RemoveStateCommand :: builder () . id (id) . build () . unwrap ())) . await ; } # [doc = "When test value `$compare` `$val`"] # [doc = ""] # [doc = "Since this value contains `$val`, you probably do not want "] # [doc = "to trigger it manually as the current value of the associated "] # [doc = "state may not match the user's set `$val` (and TouchPortal "] # [doc = "won't check against `$val`)."] pub async fn force_trigger_test_event (& mut self ,) { let mut builder = protocol :: TriggerEventCommand :: builder () ; let _ = self . 0 . send (protocol :: TouchPortalCommand :: TriggerEvent (builder . event_id ("test_event") . build () . unwrap ())) . await ; } } impl TouchPortalHandle { # [doc = "Test state for events"] pub async fn update_test_state (& mut self , value : impl Into < String >) { let _ = self . 0 . send (protocol :: TouchPortalCommand :: StateUpdate (protocol :: UpdateStateCommand :: builder () . state_id ("test_state") . value (value . into ()) . build () . unwrap ())) . await ; } } # [doc = "Valid choices for [`update_choice_state`]"] # [derive (Debug , Clone , Copy)] pub enum ValuesForStateChoiceState { Red , Green , Blue } impl :: std :: fmt :: Display for ValuesForStateChoiceState { fn fmt (& self , f : & mut :: std :: fmt :: Formatter < '_ >) -> :: std :: fmt :: Result { write ! (f , "{}" , match self { Self :: Red => "Red" , Self :: Green => "Green" , Self :: Blue => "Blue" }) } } impl TouchPortalHandle { # [doc = "Test choice state"] pub async fn update_choice_state (& mut self , value : ValuesForStateChoiceState) { let _ = self . 0 . send (protocol :: TouchPortalCommand :: StateUpdate (protocol :: UpdateStateCommand :: builder () . state_id ("choice_state") . value (value . to_string ()) . build () . unwrap ())) . await ; } }
